<project name="wymiwyg-commons-jena" default="all">


	<property environment="env" />



	<!-- Construct the classpath -->
	<path id="project.class.path">
		<pathelement path="src" />
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="../wymiwyg-commons-core/lib">
			<include name="*.jar" />
		</fileset>
		<path path="../wymiwyg-commons-core/build/wymiwyg-commons-core.jar" />
	</path>


	<target name="prepare">
		<mkdir dir="build" />
		<mkdir dir="build/classes" />
	</target>


	<!-- The "clean" target removes the deployment home directory structure,
	     so that the next time the "compile" target is requested, it will need
	     to compile everything from scratch.
	-->


	<target name="clean">
		<delete dir="build" />
	</target>



	<!-- The "compile" target is used to compile (or recompile) the Java classes
	     that make up this web application.  The recommended source code directory
	     structure makes this very easy because the <javac> task automatically
	     works its way down a source code hierarchy and compiles any class that
	     has not yet been compiled, or where the source file is newer than the
	     class file.

	     Feel free to adjust the compilation option parameters (debug,
	     optimize, and deprecation) to suit your requirements.  It is also
	     possible to base them on properties, so that you can adjust this
	     behavior at runtime.

	     The "compile" task depends on the "prepare" task, so the deployment
	     home directory structure will be created if needed the first time.
	-->

	<target name="compile" depends="prepare">

		<dependset>
			<srcfileset dir="src" includes="**/*.java" />
			<srcfileset dir="lib" includes="*.jar" />
			<targetfileset dir="build/classes" includes="**/*.class" />
		</dependset>
		<javac srcdir="src" destdir="build/classes" debug="on" optimize="on" deprecation="on" target="1.5" source="1.5">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="build/classes">
			<fileset dir="src" includes="**/*.properties" />
			<fileset dir="src" includes="**/*.txt" />
			<fileset dir="src" includes="**/*.rdf" />
			<fileset dir="src" includes="**/*.java" />
		</copy>
	</target>



	<!-- The "javadoc" target is used to create the Javadoc API documentation
	     for the Java classes in this web application.  It is assumed that
	     this documentation is included in the deployed application, so the
	     example below generates the Javadoc HTML files in a subdirectory under
	     the deployment home directory.  Feel free to customize the options for
	     the JavaDoc task, after consulting the Ant documentation.
	-->

	<target name="javadoc" depends="prepare">
		<javadoc packagenames="**.*, " sourcefiles="src/**/*.java" sourcepath="src" destdir="build/javadoc">
			<classpath refid="project.class.path" />
		</javadoc>
	</target>


	<!-- The "all" target rebuilds everything by executing the "clean"
	     target first, which forces the "compile" target to compile all
	     source code instead of just the files that have been changed.
	-->

	<target name="all" depends="clean,prepare,compile,javadoc,dist" />


	<target name="dist" depends="prepare,compile">
		<jar jarfile="build/${ant.project.name}.jar" basedir="build/classes" />
	</target>




</project>
